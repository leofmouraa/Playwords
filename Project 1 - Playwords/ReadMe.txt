================================================
=======            PLAYWORDS             =======
================================================

PLAYWORDS
This program consists of two cpp files: procdic.cpp takes a dictionary text file and extracts all simple headlines into another
text file specified by the user. A headline must have all uppercase letters and no special characters. The other one, playwords.cpp, consists of 5 five word games. In order to play, you just have to enter a text file with like the one generated by procdic.cpp.

GETTING STARTED 
Both scripts are in the form of a cpp text file, that is, in order to run them, you need to compile them first. That can be done using a c++ compiler like g++ or gcc. 

   g++ procdic.cpp -o procdic 
   g++ playwords.cpp -o playwords 

These commands will compile both scripts and create executables. Then you just have to run the executable of the desired program in a console.

BUILT WITH
 -Visual Studio Code - Microsoft 
 -Eclipse 

DEVELOPMENT STATE OF THE PROGRAMS
Procdic works great, it is fast and extracts all valid words into the specified text file. It uses a vector to store the words temporarily while their validity is verified, then all the words are stored in a set, this makes the process of removing duplicate words and sorting them greatly optimized. Initially, we were going to implement our own bubble sort algorithm, but that was making the program ridiculously slow, so we agreed to use the set implementation in order to make everything much more efficient.

Playwords has all the games implemented and they also work great, we made a neat interface so that the game isn't all text, and has some props in it. All games work has instructed except for game 4. In this game, we generate a random word with a random length between 3 and 6, then we verify if that word exists in the dictionary, if not we generate a new word until a valid one is generated. We did this because we found that creating a set of letters based on the frequency they appear in the dictionary was really confusing, and we couldn't find a frequency for each letter that made it more likely to generate a valid word, so we went all random. 

AUTHORS
 -Eduardo Ribeiro -> up201705421@fe.up.pt
 -Leonardo Moura -> up201706907@fe.up.pt


  



  



